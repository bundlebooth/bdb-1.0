- name: Write event type insertion script
  run: |
    cat <<'SCRIPT' > insert-event-types.js
    const { apiRequest, getAllEventTypes, loadPackages } = require('./utils');

    const dayMap = {
      Monday: 'Monday', Tuesday: 'Tuesday', Wednesday: 'Wednesday',
      Thursday: 'Thursday', Friday: 'Friday', Saturday: 'Saturday', Sunday: 'Sunday',
      1: 'Monday', 2: 'Tuesday', 3: 'Wednesday', 4: 'Thursday', 5: 'Friday', 6: 'Saturday', 7: 'Sunday'
    };

    async function insertNewEventTypes() {
      try {
        const packages = loadPackages();
        if (!packages.length) throw new Error('No valid packages found');
        const existingEventTypes = await getAllEventTypes();
        const existingSlugs = new Set(existingEventTypes.map(e => e.slug));

        for (const pkg of packages) {
          if (!pkg.slug || !pkg.name) {
            console.warn(`Invalid package: ${JSON.stringify(pkg)}`);
            continue;
          }
          if (existingSlugs.has(pkg.slug)) {
            console.log(`Event type ${pkg.slug} already exists, skipping`);
            continue;
          }

          const priceText = pkg.discount > 0 
            ? `**Price**: **$${pkg.price} ${pkg.currency}** (Reg. ~~$${pkg.regPrice}~~) - ${pkg.discount}% OFF!`
            : `**Price**: **$${pkg.price} ${pkg.currency}**`;
          const servicesText = pkg.equipment && Array.isArray(pkg.equipment) && pkg.equipment.length > 0
            ? `**Services Included**:\n${pkg.equipment.map(e => `- ${e}`).join('\n')}`
            : `**Services Included**: None`;
          const description = [
            priceText,
            `**Description**: ${pkg.description || 'No description provided'}`,
            `**Guests**: ${pkg.guests || 'Not specified'}`,
            `**Duration**: Up to ${pkg.maxDuration || 3} hours`,
            servicesText,
            `**Note**: ${pkg.note || 'No additional notes'}`
          ].join('\n\n');

          const transformed = {
            title: pkg.name,
            slug: pkg.slug,
            length: (pkg.maxDuration || 3) * 60,
            description,
            locations: pkg.locations && Array.isArray(pkg.locations) && pkg.locations[0]?.location_type === 'ask'
              ? [{ type: 'address', address: pkg.locations[0].location, public: true }]
              : [{ type: 'address', address: 'Toronto, ON', public: true }],
            availability: {
              days: pkg.availabilityDays || ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
              startTime: pkg.startTime || '09:00',
              endTime: pkg.endTime || '23:59'
            },
            tags: [
              ...(Array.isArray(pkg.eventType) ? pkg.eventType : []),
              ...(pkg.packageType ? [pkg.packageType] : []),
              ...(pkg.Sale === 'Y' ? ['On Sale'] : []),
              ...(pkg.New === 'Y' ? ['New'] : [])
            ],
            disableGuests: pkg.disableGuests || false,
            metadata: {
              disableCalVideoTranscription: pkg.disableCalVideoTranscription || false,
              disableGuestsCancelling: pkg.disableGuestsCancelling || false,
              disableGuestsRescheduling: pkg.disableGuestsRescheduling || false
            },
            bookingFields: pkg.bookingFields || [],
            color: pkg.color || { lightThemeHex: '#292929' },
            minimumBookingNotice: pkg.minimumBookingNotice || 20160,
            bookerLayouts: pkg.bookerLayouts || {
              defaultLayout: 'month',
              enabledLayouts: ['month']
            }
          };

          const result = await apiRequest('POST', '/api/v2/event-types', transformed);
          console.log(`Created event type: ${pkg.slug} (ID: ${result.data.id})`);
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
        console.log('Event type insertion completed');
      } catch (e) {
        console.error(`Fatal error during insertion: ${e.message}`);
        process.exit(1);
      }
    }

    insertNewEventTypes();
    SCRIPT

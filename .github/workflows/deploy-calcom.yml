name: Map and Deploy JSON to Cal.com

on:
  push:
    branches:
      - main
    paths:
      - 'packages.json'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Upgraded to Node 20 for better performance and security
          cache: 'npm'

      - name: Install dependencies
        run: npm ci # Ensures consistent dependency installation

      - name: Verify packages.json
        run: |
          if [ ! -f packages.json ]; then
            echo "Error: packages.json not found"
            exit 1
          fi
          echo "Success: packages.json found and verified"

      - name: Write event type processing script
        run: |
          cat <<'SCRIPT' > deploy.js
          const fs = require('fs');
          const https = require('https');

          const dayMap = {
            'Monday': 'Monday',
            'Tuesday': 'Tuesday',
            'Wednesday': 'Wednesday',
            'Thursday': 'Thursday',
            'Friday': 'Friday',
            'Saturday': 'Saturday',
            'Sunday': 'Sunday',
            1: 'Monday',
            2: 'Tuesday',
            3: 'Wednesday',
            4: 'Thursday',
            5: 'Friday',
            6: 'Saturday',
            7: 'Sunday'
          };

          function apiRequest(method, path, body = null, retries = 2) {
            console.log(`[INFO] Initiating ${method} request to ${path}`);
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'api.cal.com',
                path: path,
                method: method,
                headers: {
                  'Authorization': 'Bearer ' + process.env.CALCOM_API_KEY,
                  'Content-Type': 'application/json'
                }
              };
              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', (chunk) => { data += chunk; });
                res.on('end', () => {
                  console.log(`[INFO] Response status: ${res.statusCode} for ${path}`);
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    try {
                      const parsedData = JSON.parse(data || '{}');
                      console.log(`[SUCCESS] Parsed response for ${path}`);
                      resolve(parsedData);
                    } catch (e) {
                      console.error(`[ERROR] Failed to parse response for ${path}:`, e);
                      reject(e);
                    }
                  } else if (res.statusCode === 404 && retries > 0) {
                    console.warn(`[WARN] 404 received for ${path}, retrying (${retries} attempts left)`);
                    setTimeout(() => {
                      apiRequest(method, path, body, retries - 1).then(resolve).catch(reject);
                    }, 1000);
                  } else {
                    console.error(`[ERROR] Request failed for ${path} with status ${res.statusCode}`);
                    reject({ statusCode: res.statusCode, data });
                  }
                });
              });
              req.on('error', (e) => { 
                console.error(`[ERROR] Request error for ${path}:`, e);
                reject(e); 
              });
              if (body) {
                console.log(`[INFO] Sending body for ${path}:`, JSON.stringify(body));
                req.write(JSON.stringify(body));
              }
              req.end();
            });
          }

          async function getAllEventTypes() {
            console.log('[INFO] Fetching all event types');
            try {
              const res = await apiRequest('GET', '/api/v2/event-types');
              console.log('[DEBUG] Raw event types response:', JSON.stringify(res, null, 2));
              const eventTypes = res.eventTypes || res.event_types || res.data || [];
              if (!Array.isArray(eventTypes)) {
                console.error('[ERROR] Invalid event types response: expected array, got:', typeof eventTypes);
                return [];
              }
              console.log('[SUCCESS] Retrieved event types:', eventTypes.length);
              return eventTypes;
            } catch (e) {
              console.error('[ERROR] Error fetching event types:', e.message || JSON.stringify(e));
              return [];
            }
          }

          async function getEventTypeId(slug) {
            console.log(`[INFO] Fetching event type ID for slug: ${slug}`);
            try {
              const res = await apiRequest('GET', `/api/v2/event-types?slug=${encodeURIComponent(slug)}`);
              const eventTypes = res.eventTypes || res.event_types || res.data || [];
              console.log(`[SUCCESS] Found ${eventTypes.length} event types for slug: ${slug}`);
              return eventTypes.length > 0 ? eventTypes[0].id : null;
            } catch (e) {
              console.error(`[ERROR] Error fetching event type ID for slug ${slug}:`, e);
              return null;
            }
          }

          async function getEventType(id) {
            console.log(`[INFO] Fetching event type with ID: ${id}`);
            try {
              const res = await apiRequest('GET', `/api/v2/event-types/${id}`);
              console.log(`[SUCCESS] Retrieved event type for ID: ${id}`);
              return res.data || res.event_type || null;
            } catch (e) {
              console.error(`[ERROR] Error fetching event type ${id}:`, e);
              return null;
            }
          }

          async function createSchedule(scheduleData) {
            console.log('[INFO] Creating schedule:', scheduleData.name);
            try {
              const mappedAvailability = scheduleData.availability.map(slot => ({
                ...slot,
                days: slot.days.map(day => dayMap[day] || day)
              }));
              const payload = {
                name: scheduleData.name,
                timeZone: scheduleData.timeZone,
                isDefault: scheduleData.isDefault !== undefined ? scheduleData.isDefault : true,
                availability: mappedAvailability
              };
              console.log('[INFO] Schedule payload:', payload);
              const result = await apiRequest('POST', '/api/v2/schedules', payload);
              console.log(`[SUCCESS] Created schedule with ID: ${result.data.id}`);
              return result.data.id;
            } catch (e) {
              console.error('[ERROR] Failed to create schedule:', e);
              return null;
            }
          }

          function compareEventTypes(oldTypes, newTypes) {
            const added = newTypes.filter(type => !oldTypes.includes(type));
            const deleted = oldTypes.filter(type => !newTypes.includes(type));
            return { added, deleted };
          }

          function compareObjects(obj1, obj2, path = '') {
            console.log(`[INFO] Comparing objects at path: ${path}`);
            const differences = [];
            for (const key in obj1) {
              if (key === 'description' || key === 'scheduleIds') continue;
              const fullPath = path ? `${path}.${key}` : key;
              if (typeof obj1[key] === 'object' && obj1[key] !== null && !Array.isArray(obj1[key])) {
                const subDiffs = compareObjects(obj1[key], obj2[key] || {}, fullPath);
                differences.push(...subDiffs);
              } else if (Array.isArray(obj1[key])) {
                if (!Array.isArray(obj2[key]) || JSON.stringify(obj1[key]) !== JSON.stringify(obj2[key])) {
                  differences.push(`${fullPath}: ${JSON.stringify(obj1[key])} != ${JSON.stringify(obj2[key])}`);
                }
              } else if (obj1[key] !== obj2[key]) {
                differences.push(`${fullPath}: ${obj1[key]} != ${obj2[key]}`);
              }
            }
            for (const key in obj2) {
              if (!(key in obj1) && key !== 'id' && key !== 'description' && key !== 'scheduleIds') {
                const fullPath = path ? `${path}.${key}` : key;
                differences.push(`${fullPath}: missing in new, present in old as ${obj2[key]}`);
              }
            }
            if (differences.length > 0) {
              console.log(`[INFO] Differences found:`, differences);
            } else {
              console.log(`[INFO] No differences found at path: ${path}`);
            }
            return differences;
          }

          function deduplicatePackages(packages) {
            console.log('[INFO] Deduplicating packages');
            const seenSlugs = new Set();
            const uniquePackages = [];
            for (const pkg of packages) {
              if (seenSlugs.has(pkg.slug)) {
                console.warn(`[WARN] Duplicate slug detected: ${pkg.slug}. Skipping ${pkg.name}`);
                continue;
              }
              seenSlugs.add(pkg.slug);
              uniquePackages.push(pkg);
            }
            console.log(`[SUCCESS] Deduplicated to ${uniquePackages.length} unique packages`);
            return uniquePackages;
          }

          async function checkDiscrepancies() {
            console.log('[INFO] Checking for discrepancies between packages.json and json');
            let packages = JSON.parse(fs.readFileSync('packages.json'));
            console.log(`[INFO] Loaded ${packages.length} packages from packages.json`);
            if (packages.some(pkg => Object.keys(pkg).length === 1)) {
              packages = packages.map(p => Object.values(p)[0]);
            }
            packages = deduplicatePackages(packages);
            if (packages.length === 0) {
              console.error('[ERROR] No valid packages found after deduplication');
              throw new Error('No valid packages found after deduplication');
            }
            const existingEventTypes = await getAllEventTypes();
            const existingSlugs = new Set(existingEventTypes.map(e => e.slug));
            console.log(`[INFO] Existing event type slugs: ${Array.from(existingSlugs)}`);
            for (const pkg of packages) {
              if (!pkg.slug || !pkg.name) {
                console.warn(`[WARNING] Invalid package: skipping package missing slug or name: ${JSON.stringify(pkg)}`);
                continue;
              }
              console.log(`[INFO] Checking package: ${pkg.name} (${pkg.slug})`);
              const priceText = pkg.discount > 0 
                ? `**Price**: **$${pkg.price}** (Reg ~~$${pkg.regPrice || pkg.regularPrice}~~) - ${pkg.discount}% OFF!`
                : `**Price**: **$${pkg.price}**`;
              const servicesText = pkg.equipment && Array.isArray(pkg.equipment) && pkg.equipment.length > 0
                ? `**Services Included**:\n${pkg.equipment.map(e => `- ${e}`).join('\n')}`
                : `**Services Included**: None`;
              const description = [
                priceText,
                `**Description**: ${pkg.description || 'No description provided'}`,
                `**Guests**: ${pkg.guests || 'Not specified'}`,
                `**Duration**: Up to ${pkg.maxDuration || '3'} hours`,
                servicesText,
                `**Note**: ${pkg.note || 'No additional notes'}`
              ].join('\n\n');
              const transformed = {
                title: pkg.name,
                slug: pkg.slug,
                length: pkg.maxDuration ? pkg.maxDuration * 60 : 180,
                description: description,
                locations: pkg.devices && Array.isArray(pkg.devices) && pkg.devices[0]?.location_type === 'ask'
                  ? [{ type: 'address', address: 'To be provided by client', public: true }]
                  : [{ type: 'address', address: pkg.location || 'Toronto, ON', public: true }],
                availability: pkg.available || {
                  days: pkg.days || ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
                  startTime: pkg.startTime || '09:00',
                  endTime: pkg.endTime || '23:59'
                },
                tags: [],
                disableGuests: pkg.disableGuests || false,
                metadata: {
                  disableCalVideoTranscription: pkg.disableCalVideoTranscription || false,
                  disableGuestsCancelling: pkg.disableGuestsCancelling || false,
                  disableGuestsRescheduling: pkg.disableGuestsRescheduling || false
                },
                bookingFields: pkg.bookingFields || [],
                color: pkg.color || undefined,
                minimumBookingNotice: pkg.minimumBookingNotice || undefined,
                bookerLayouts: pkg.pageLayouts || undefined
              };
              if (Array.isArray(pkg.eventType)) {
                transformed.tags = transformed.tags.concat(pkg.eventType);
              }
              if (pkg.packageType) transformed.tags.push(pkg.packageType);
              if (pkg.sale === 'Y') transformed.tags.push('On Sale');
              if (pkg.new === 'Y') transformed.tags.push('New');
              const existingEventType = existingEventTypes.find(e => e.slug === transformed.slug);
              if (existingEventType) {
                console.log(`[INFO] Comparing event type ${transformed.slug} with existing ID: ${existingEventType.id}`);
                const differences = compareObjects(transformed, existingEventType);
                const tagDiffs = compareEventTypes(existingEventType.tags || [], transformed.tags || []);
                const updatePayload = { description: transformed.description };
                if (differences.length > 0 || tagDiffs.added.length > 0 || tagDiffs.deleted.length > 0) {
                  console.log(`[INFO] Differences detected for slug: ${transformed.slug}`);
                  if (differences.length > 0) {
                    console.log('[INFO] Field differences:');
                    differences.forEach(diff => console.log(`    ${diff}`));
                  }
                  if (tagDiffs.added.length > 0) {
                    console.log(`[INFO] Added event types: ${tagDiffs.added.join(', ')}`);
                  }
                  if (tagDiffs.deleted.length > 0) {
                    console.log(`[INFO] Deleted event types: ${tagDiffs.deleted.join(', ')}`);
                  }
                  Object.assign(updatePayload, transformed);
                  try {
                    await apiRequest('PATCH', `/api/v2/event-types/${existingEventType.id}`, updatePayload);
                    console.log(`[SUCCESS] Updated event type for slug: ${transformed.slug} with new description and fields`);
                  } catch (e) {
                    console.error(`[ERROR] Failed to update event type for slug ${transformed.slug}:`, e);
                  }
                } else {
                  console.log(`[INFO] Only description update required for ${transformed.slug}`);
                  try {
                    await apiRequest('PATCH', `/api/v2/event-types/${existingEventType.id}`, updatePayload);
                    console.log(`[SUCCESS] Updated description for slug: ${transformed.slug}`);
                  } catch (e) {
                    console.error(`[ERROR] Failed to update description for slug ${transformed.slug}:`, e);
                  }
                }
              }
            }
            console.log('[SUCCESS] Discrepancy check and updates completed');
          }

          async function insertNewEventTypes() {
            console.log('[INFO] Checking for new event types to insert');
            let packages = JSON.parse(fs.readFileSync('packages.json'));
            console.log(`[INFO] Loaded ${packages.length} packages from packages.json`);
            if (packages.some(pkg => Object.keys(pkg).length === 1)) {
              packages = packages.map(p => Object.values(p)[0]);
            }
            packages = deduplicatePackages(packages);
            if (packages.length === 0) {
              console.error('[ERROR] No valid packages found after deduplication');
              throw new Error('No valid packages found after deduplication');
            }
            const existingEventTypes = await getAllEventTypes();
            const existingSlugs = new Set(existingEventTypes.map(e => e.slug));
            console.log(`[INFO] Existing event type slugs: ${Array.from(existingSlugs)}`);
            for (const pkg of packages) {
              if (!pkg.slug || !pkg.name) {
                console.warn(`[WARNING] Invalid package: skipping package missing slug or name: ${JSON.stringify(pkg)}`);
                continue;
              }
              if (existingSlugs.has(pkg.slug)) {
                console.log(`[INFO] Event type ${pkg.slug} already exists, skipping creation`);
                continue;
              }
              console.log(`[INFO] Preparing to create new event type: ${pkg.name} (${pkg.slug})`);
              const priceText = pkg.discount > 0 
                ? `**Price**: **$${pkg.price}** (Reg ~~$${pkg.regPrice || pkg.regularPrice}~~) - ${pkg.discount}% OFF!`
                : `**Price**: **$${pkg.price}**`;
              const servicesText = pkg.equipment && Array.isArray(pkg.equipment) && pkg.equipment.length > 0
                ? `**Services Included**:\n${pkg.equipment.map(e => `- ${e}`).join('\n')}`
                : `**Services Included**: None`;
              const description = [
                priceText,
                `**Description**: ${pkg.description || 'No description provided'}`,
                `**Guests**: ${pkg.guests || 'Not specified'}`,
                `**Duration**: Up to ${pkg.maxDuration || '3'} hours`,
                servicesText,
                `**Note**: ${pkg.note || 'No additional notes'}`
              ].join('\n\n');
              const transformed = {
                title: pkg.name,
                slug: pkg.slug,
                length: pkg.maxDuration ? pkg.maxDuration * 60 : 180,
                description: description,
                locations: pkg.devices && Array.isArray(pkg.devices) && pkg.devices[0]?.location_type === 'ask'
                  ? [{ type: 'address', address: 'To be provided by client', public: true }]
                  : [{ type: 'address', address: pkg.location || 'Toronto, ON', public: true }],
                availability: pkg.available || {
                  days: pkg.days || ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
                  startTime: pkg.startTime || '09:00',
                  endTime: pkg.endTime || '23:59'
                },
                tags: [],
                disableGuests: pkg.disableGuests || false,
                metadata: {
                  disableCalVideoTranscription: pkg.disableCalVideoTranscription || false,
                  disableGuestsCancelling: pkg.disableGuestsCancelling || false,
                  disableGuestsRescheduling: pkg.disableGuestsRescheduling || false
                },
                bookingFields: pkg.bookingFields || [],
                color: pkg.color || undefined,
                minimumBookingNotice: pkg.minimumBookingNotice || undefined,
                bookerLayouts: pkg.pageLayouts || undefined
              };
              if (Array.isArray(pkg.eventType)) {
                transformed.tags = transformed.tags.concat(pkg.eventType);
              }
              if (pkg.packageType) transformed.tags.push(pkg.packageType);
              if (pkg.sale === 'Y') transformed.tags.push('On Sale');
              if (pkg.new === 'Y') transformed.tags.push('New');
              console.log(`[INFO] Creating new event type for slug: ${transformed.slug}`);
              let eventTypeId = null;
              try {
                const result = await apiRequest('POST', '/api/v2/event-types', transformed);
                console.log(`[SUCCESS] Created event type for slug: ${transformed.slug} with ID: ${result.data.id}`);
                eventTypeId = result.data.id;
              } catch (e) {
                if (e.statusCode === 400 && e.data?.error?.message?.includes('event type with this slug')) {
                  console.log(`[INFO] Event type ${transformed.slug} already exists, skipping`);
                  continue;
                }
                console.error(`[ERROR] Failed to create event type for slug ${transformed.slug}:`, e);
                continue;
              }
              if (transformed.availability && Array.isArray(transformed.availability.schedules)) {
                console.log(`[INFO] Processing schedules for ${transformed.slug}`);
                const scheduleIds = [];
                for (const schedule of transformed.availability.schedules) {
                  const scheduleId = await createSchedule(schedule);
                  if (scheduleId) scheduleIds.push(scheduleId);
                }
                if (scheduleIds.length > 0 && eventTypeId) {
                  try {
                    await apiRequest('PATCH', `/api/v2/event-types/${eventTypeId}`, { scheduleIds });
                    console.log(`[SUCCESS] Updated schedule IDs for slug: ${transformed.slug}`);
                  } catch (e) {
                    console.error(`[ERROR] Failed to update schedule IDs for slug ${transformed.slug}:`, e);
                  }
                }
              }
              await new Promise(resolve => setTimeout(resolve, 5000));
            }
            console.log('[SUCCESS] New event type insertion completed');
          }

          async function processEvents() {
            try {
              console.log('[INFO] Starting event processing pipeline');
              await checkDiscrepancies();
              await insertNewEventTypes();
              console.log('[SUCCESS] Event processing pipeline completed');
            } catch (e) {
              console.error('[ERROR] Fatal error during event processing:', e.message || JSON.stringify(e));
              process.exit(1);
            }
          }

          processEvents();
          SCRIPT

      - name: Process event types (Check discrepancies and insert new)
        env:
          CALCOM_API_KEY: ${{ secrets.CALCOM_API_KEY }}
        run: |
          node deploy.js || {
            echo "Deploy script failed. Check logs for details."
            exit 1
          }

      - name: Write payment configuration script
        run: |
          cat <<'SCRIPT' > configure-payments.js
          const fs = require('fs');
          const https = require('https');

          function apiRequest(method, path, body = null) {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'api.cal.com',
                path: path,
                method: method,
                headers: {
                  'Authorization': 'Bearer ' + process.env.CALCOM_API_KEY,
                  'Content-Type': 'application/json'
                }
              };
              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', (chunk) => { data += chunk; });
                res.on('end', () => {
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    try {
                      resolve(JSON.parse(data || '{}'));
                    } catch (e) {
                      reject(e);
                    }
                  } else {
                    reject({ statusCode: res.statusCode, data });
                  }
                });
              });
              req.on('error', (e) => { reject(e); });
              if (body) req.write(JSON.stringify(body));
              req.end();
            });
          }

          async function getEventTypeId(slug) {
            try {
              const res = await apiRequest('GET', '/api/v2/event-types?slug=' + encodeURIComponent(slug));
              const event_types = res.eventTypes || res.event_types || res.data || [];
              return event_types.length > 0 ? event_types[0].id : null;
            } catch (e) {
              console.error(`Error fetching event type ID for slug ${slug}:`, e);
              return null;
            }
          }

          async function configurePayments() {
            try {
              console.log('[INFO] Starting payment configuration');
              let packages = JSON.parse(fs.readFileSync('packages.json'));
              if (packages.some(pkg => Object.keys(pkg).length === 1)) {
                packages = packages.map(pkg => Object.values(pkg)[0]);
              }
              packages = packages.filter((pkg, index, self) => 
                index === self.findIndex(p => p.slug === pkg.slug)
              );
              console.log(`[INFO] Processing ${packages.length} packages for payment configuration`);
              for (const pkg of packages) {
                if (!pkg.slug || !pkg.name) {
                  console.warn(`[WARN] Invalid package: missing slug or name for package: ${JSON.stringify(pkg)}`);
                  continue;
                }
                if (!pkg.price || pkg.price <= 0) {
                  console.log(`[INFO] Skipping payment configuration for ${pkg.slug} due to invalid price`);
                  continue;
                }
                const eventTypeId = await getEventTypeId(pkg.slug);
                if (!eventTypeId) {
                  console.warn(`[WARN] No event type found for slug ${pkg.slug}, skipping payment configuration`);
                  continue;
                }
                const paymentPayload = {
                  price: Math.round(pkg.price * 100),
                  currency: pkg.currency?.toLowerCase() || 'cad',
                  metadata: {
                    apps: {
                      stripe: {
                        enabled: true,
                        price: Math.round(pkg.price * 100),
                        currency: pkg.currency?.toLowerCase() || 'cad'
                      }
                    }
                  }
                };
                try {
                  await apiRequest('PATCH', '/api/v2/event-types/' + eventTypeId, paymentPayload);
                  console.log(`[SUCCESS] Configured payment for slug: ${pkg.slug}`);
                } catch (e) {
                  console.error(`[ERROR] Failed to configure payment for slug ${pkg.slug}:`, e);
                }
                await new Promise(resolve => setTimeout(resolve, 2000));
              }
              console.log('[SUCCESS] Payment configuration completed');
            } catch (e) {
              console.error('[ERROR] Fatal error during payment configuration:', e.message || JSON.stringify(e));
              process.exit(1);
            }
          }

          configurePayments();
          SCRIPT

      - name: Configure payments for event types
        env:
          CALCOM_API_KEY: ${{ secrets.CALCOM_API_KEY }}
        run: |
          node configure-payments.js || {
            echo "Payment configuration script failed. Check logs for details."
            exit 1
          }

      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs
          path: |
            *.log
            *.txt
          retention-days: 7


name: Map and Deploy JSON to Cal.com

on:
  push:
    branches:
      - main
    paths:
      - 'packages.json'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Map JSON and Push to Cal.com
        env:
          CALCOM_API_KEY: ${{ secrets.CALCOM_API_KEY }}
        run: |
          node -e "
            const fs = require('fs');
            const https = require('https');

            const dayMap = {
              'Monday': 1, 'Tuesday': 2, 'Wednesday': 3, 'Thursday': 4,
              'Friday': 5, 'Saturday': 6, 'Sunday': 7
            };

            async function getEventTypeId(slug) {
              return new Promise((resolve) => {
                const options = {
                  hostname: 'api.cal.com',
                  path: '/v2/event-types',
                  method: 'GET',
                  headers: { Authorization: 'Bearer ' + process.env.CALCOM_API_KEY }
                };
                https.request(options, (res) => {
                  let data = '';
                  res.on('data', (chunk) => data += chunk);
                  res.on('end', () => {
                    try {
                      const eventTypes = JSON.parse(data).event_types || [];
                      const event = eventTypes.find(e => e.slug === slug);
                      resolve(event ? event.id : null);
                    } catch (e) {
                      console.error('Error parsing event types:', e);
                      resolve(null);
                    }
                  });
                }).on('error', (e) => {
                  console.error('Error fetching event types:', e);
                  resolve(null);
                }).end();
              });
            }

            async function processEvents() {
              const packages = JSON.parse(fs.readFileSync('packages.json'));
              for (const pkg of packages) {
                const transformed = {
                  title: pkg.name || 'Placeholder Title',
                  slug: (pkg.name || 'placeholder').toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, ''),
                  length: pkg.maxDuration ? pkg.maxDuration * 60 : 180,
                  description: pkg.description || 'No description provided',
                  locations: [{ type: 'inPerson', address: 'Toronto, ON' }],
                  availability: {
                    days: [1, 2, 3, 4, 5],
                    startTime: '09:00',
                    endTime: '17:00'
                  },
                  price: pkg.price ? pkg.price * 100 : 0,
                  currency: 'cad',
                  tags: [
                    ...(pkg.eventType || []),
                    pkg.packageType,
                    pkg.Sale === 'Y' ? 'On Sale' : '',
                    pkg.New === 'Y' ? 'New' : ''
                  ].filter(Boolean)
                };

                const slug = transformed.slug;
                const eventTypeId = await getEventTypeId(slug);
                const method = eventTypeId ? 'PUT' : 'POST';

                const options = {
                  hostname: 'api.cal.com',
                  path: eventTypeId ? '/v2/event-types/' + eventTypeId : '/v2/event-types',
                  method,
                  headers: {
                    'Authorization': 'Bearer ' + process.env.CALCOM_API_KEY,
                    'Content-Type': 'application/json'
                  }
                };

                const req = https.request(options, (res) => {
                  console.log(`Status for ${slug}: ${res.statusCode}`);
                  let data = '';
                  res.on('data', (chunk) => data += chunk);
                  res.on('end', () => {
                    console.log(`Response for ${slug}: ${data}`);
                  });
                });
                req.on('error', (e) => {
                  console.error(`Error for ${slug}: ${e.message}`);
                });
                req.write(JSON.stringify(transformed));
                req.end();
              }
            }

            processEvents().catch(console.error);
          "

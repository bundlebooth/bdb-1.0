name: Map and Deploy JSON to Cal.com

on:
  push:
    branches:
      - main
    paths:
      - 'packages.json'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Map JSON and Push to Cal.com
        env:
          CALCOM_API_KEY: ${{ secrets.CALCOM_API_KEY }}
        run: |
          node <<EOF
          const fs = require('fs');
          const https = require('https');

          const dayMap = {
            'Monday': 1, 'Tuesday': 2, 'Wednesday': 3, 'Thursday': 4,
            'Friday': 5, 'Saturday': 6, 'Sunday': 7
          };

          function apiRequest(method, path, body = null) {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'api.cal.com',
                path: path,
                method: method,
                headers: {
                  'Authorization': 'Bearer ' + process.env.CALCOM_API_KEY,
                  'Content-Type': 'application/json'
                }
              };
              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', (chunk) => { data += chunk; });
                res.on('end', () => {
                  console.log('Raw API response:', data);
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    try {
                      resolve(JSON.parse(data));
                    } catch (e) {
                      resolve({});
                    }
                  } else {
                    reject({ statusCode: res.statusCode, data: data });
                  }
                });
              });
              req.on('error', (e) => { reject(e); });
              if (body) {
                const bodyString = JSON.stringify(body);
                console.log('Serialized payload:', bodyString);
                req.write(bodyString);
              }
              req.end();
            });
          }

          async function getEventTypeId(slug) {
            try {
              const res = await apiRequest('GET', '/v2/event-types');
              const eventTypes = res.event_types || [];
              for (let i = 0; i < eventTypes.length; i++) {
                if (eventTypes[i].slug === slug) {
                  return eventTypes[i].id;
                }
              }
              return null;
            } catch (e) {
              console.error('Error fetching event types:', e);
              return null;
            }
          }

          async function processEvents() {
            try {
              console.log('Reading packages.json...');
              let packages = JSON.parse(fs.readFileSync('packages.json'));
              if (!Array.isArray(packages)) {
                console.error('packages.json is not an array:', packages);

name: Update Cal.com Event Type

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  update-event-type:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Create or update event type on Cal.com
        env:
          CAL_API_KEY: ${{ secrets.CAL_API_KEY }}
        run: |
          node << 'EOF'
          import fetch from 'node-fetch';
          import fs from 'fs';

          // Read package.json
          const pkgRaw = fs.readFileSync('./package.json', 'utf-8');
          const pkg = JSON.parse(pkgRaw);

          // Convert price to cents, default 0
          const priceCents = pkg.price && !isNaN(pkg.price) ? Math.round(pkg.price * 100) : 0;

          // Build event type payload
          const eventTypePayload = {
            title: pkg.name || 'Untitled Event',
            slug: pkg.slug || pkg.name?.toLowerCase().replace(/\s+/g, '-') || 'untitled-event',
            description: pkg.description || '',
            length: (pkg.maxDuration || 6) * 60, // duration in seconds (default 6 minutes)
            locations: [
              {
                type: 'inPerson',
                address: pkg.location || 'Toronto, ON'
              }
            ],
            paymentProviders: priceCents > 0 ? [
              {
                provider: 'stripe',
                enabled: true,
                config: {
                  price: priceCents,
                  currency: 'cad'
                }
              }
            ] : [],
            requiresPayment: priceCents > 0
          };

          // POST to Cal.com API v2 event-types endpoint
          const response = await fetch('https://api.cal.com/v2/event-types', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${process.env.CAL_API_KEY}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(eventTypePayload)
          });

          const data = await response.json();

          if (!response.ok) {
            console.error('Failed to create/update event type:', data);
            process.exit(1);
          }

          console.log('Success:', data);
          EOF
